name: iOS Build & Release

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  FLUTTER_VERSION: "3.29.3"
  RUBY_VERSION: "3.2"
  APP_STORE_CONNECT_URL: "https://appstoreconnect.apple.com/apps/${{ secrets.APP_STORE_ID }}/testflight/ios"

jobs:
  build-ios:
    name: Build & Upload iOS
    # macOS-15 –æ–±—Ä–∞–∑ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç Xcode 16.2
    runs-on: macos-15

    steps:
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Preparation ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Checkout code
      uses: actions/checkout@v4

    # Xcode 16.2 (iOS 18 SDK)
    - name: Select Xcode 16.2
      run: sudo xcode-select -s /Applications/Xcode_16.2.app

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: "stable"
        cache: true

    - name: Setup Ruby & Fastlane
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies
      run: |
        gem install fastlane cocoapods
        flutter pub get

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Decrypt secrets ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Decrypt secrets
      run: |
        mkdir -p ios/Runner private_keys env_dart
        # iOS certificates
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.FILE_PASSPHRASE }}" \
          --output ios/Runner/certificate.p12 ios/Runner/certificate.p12.gpg
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.FILE_PASSPHRASE }}" \
          --output ios/Runner/${{ secrets.PROVISIONING_PROFILE }}.mobileprovision ios/Runner/${{ secrets.PROVISIONING_PROFILE }}.mobileprovision.gpg
        # App Store Connect API key
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.FILE_PASSPHRASE }}" \
          --output private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8 \
          private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8.gpg
        # Env-config
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.FILE_PASSPHRASE }}" \
          --output env_dart/prod.json env_dart/prod.json.gpg

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Code generation ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Generate localization
      run: |
        dart pub global activate intl_utils
        dart pub global run intl_utils:generate

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS project prep ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Prepare iOS build
      run: |
        flutter precache --ios
        cd ios && pod install && cd ..

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Fastlane config ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Configure Fastlane
      run: |
        mkdir -p ios/fastlane
        # Fastfile
        cat > ios/fastlane/Fastfile << 'EOF'
        default_platform(:ios)

        platform :ios do
          desc "Build IPA for TestFlight"
          lane :release do
            setup_signing
            build_app_store_ipa
            cleanup_keychain
          end

          private_lane :setup_signing do
            keychain_name = "build_keychain"
            keychain_password = ENV["KEYCHAIN_PASSWORD"]

            delete_keychain(name: keychain_name) if File.exist?(File.expand_path("~/Library/Keychains/#{keychain_name}-db"))

            create_keychain(
              name: keychain_name,
              password: keychain_password,
              default_keychain: true,
              unlock: true,
              timeout: 3600,
              add_to_search_list: true
            )

            import_certificate(
              certificate_path: "Runner/certificate.p12",
              certificate_password: ENV["P12_PASSWORD"],
              keychain_name: keychain_name,
              keychain_password: keychain_password
            )

            profile_path = install_provisioning_profile(
              path: "Runner/#{ENV['PROVISIONING_PROFILE']}.mobileprovision"
            )
            profile_uuid = File.basename(profile_path, '.mobileprovision')

            update_code_signing_settings(
              use_automatic_signing: false,
              path: "Runner.xcodeproj",
              team_id: ENV["DEVELOPMENT_TEAM"],
              profile_name: ENV["PROVISIONING_PROFILE"],
              profile_uuid: profile_uuid,
              code_sign_identity: ENV["CODE_SIGN_IDENTITY"],
              bundle_identifier: ENV["BUNDLE_IDENTIFIER"]
            )

            ENV['PROFILE_UUID'] = profile_uuid
          end

          private_lane :build_app_store_ipa do
            build_app(
              workspace: "Runner.xcworkspace",
              scheme: "Runner",
              export_method: "app-store",
              export_options: {
                provisioningProfiles: {
                  ENV['BUNDLE_IDENTIFIER'] => ENV['PROFILE_UUID']
                }
              },
              include_bitcode: false,
              include_symbols: true,
              output_name: "app-release.ipa",
              output_directory: "../build/ios/ipa"
            )
          end

          private_lane :cleanup_keychain do
            keychain_name = "build_keychain"
            delete_keychain(name: keychain_name) if File.exist?(File.expand_path("~/Library/Keychains/#{keychain_name}-db"))
          end
        end
        EOF

        # Appfile
        cat > ios/fastlane/Appfile << EOF
        app_identifier("${{ secrets.BUNDLE_IDENTIFIER }}")
        team_id("${{ secrets.DEVELOPMENT_TEAM }}")
        EOF

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Build & archive ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Build IPA
      env:
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
        CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
        BUNDLE_IDENTIFIER: ${{ secrets.BUNDLE_IDENTIFIER }}
      run: |
        flutter clean            # –≤–∞–∂–Ω–æ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã Xcode
        flutter build ios --release --no-codesign --dart-define-from-file=env_dart/prod.json
        cd ios && fastlane release
        ls -la ../build/ios/ipa

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Upload to TestFlight ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Upload to TestFlight
      run: |
        xcrun altool --upload-app --type ios -f build/ios/ipa/app-release.ipa \
          --apiKey ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }} \
          --apiIssuer ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }} \
          --verbose

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Artifacts & notification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Get commit info
      id: commit-info
      run: |
        echo "message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
        echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "date=$(git log -1 --format=%cd --date=format:'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-release
        path: build/ios/ipa/app-release.ipa

    - name: Save release version
      run: |
        mkdir -p releases
        cp build/ios/ipa/app-release.ipa releases/ios-${{ steps.commit-info.outputs.sha }}.ipa

    - name: Send Telegram notification
      run: |
        cat << EOF > message.txt
        üçè iOS Build Completed

        Repo: ${{ github.repository }}
        Commit: ${{ steps.commit-info.outputs.sha }}
        Date: ${{ steps.commit-info.outputs.date }}
        Message: ${{ steps.commit-info.outputs.message }}

        TestFlight: ${{ env.APP_STORE_CONNECT_URL }}
        EOF

        curl -G \
          --data-urlencode "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
          --data-urlencode "text=$(cat message.txt)" \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage

        curl -X POST \
          -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -F document=@build/ios/ipa/app-release.ipa \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument
